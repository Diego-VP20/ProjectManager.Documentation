{
  "api/index.html": {
    "href": "api/index.html",
    "title": "Welcome | ProjectManager",
    "keywords": "Welcome This webpage will be used as the official documentation of the Project Manager Application"
  },
  "api/ProjectManager.App.Handlers.html": {
    "href": "api/ProjectManager.App.Handlers.html",
    "title": "Namespace ProjectManager.App.Handlers | ProjectManager",
    "keywords": "Namespace ProjectManager.App.Handlers Interfaces IQueryLoggingHandler"
  },
  "api/ProjectManager.App.Handlers.IQueryLoggingHandler.html": {
    "href": "api/ProjectManager.App.Handlers.IQueryLoggingHandler.html",
    "title": "Interface IQueryLoggingHandler | ProjectManager",
    "keywords": "Interface IQueryLoggingHandler Namespace : ProjectManager.App.Handlers Assembly : ProjectManager.App.dll Syntax public interface IQueryLoggingHandler Methods Name Description RunAndLogQuery<T>(Func<Task<T>>) Runs a query and logs the time it took to execute if it succeeded. Otherwise it logs the exception."
  },
  "api/ProjectManager.App.Handlers.IQueryLoggingHandler.RunAndLogQuery.html": {
    "href": "api/ProjectManager.App.Handlers.IQueryLoggingHandler.RunAndLogQuery.html",
    "title": "Method RunAndLogQuery | ProjectManager",
    "keywords": "Method RunAndLogQuery RunAndLogQuery<T>(Func<Task<T>>) Runs a query and logs the time it took to execute if it succeeded. Otherwise it logs the exception. Declaration Task<Result<T>> RunAndLogQuery<T>(Func<Task<T>> query) Parameters Type Name Description Func < Task <T>> query Function to run and log. Returns Type Description Task < LanguageExt.Common.Result <T>> Returns Result of T which on success has T or the exception on failure. Type Parameters Name Description T The return type of query."
  },
  "api/ProjectManager.App.Helpers.html": {
    "href": "api/ProjectManager.App.Helpers.html",
    "title": "Namespace ProjectManager.App.Helpers | ProjectManager",
    "keywords": "Namespace ProjectManager.App.Helpers Interfaces IPasswordHasher"
  },
  "api/ProjectManager.App.Helpers.IPasswordHasher.HashPasswordAsync.html": {
    "href": "api/ProjectManager.App.Helpers.IPasswordHasher.HashPasswordAsync.html",
    "title": "Method HashPasswordAsync | ProjectManager",
    "keywords": "Method HashPasswordAsync HashPasswordAsync(String) Asynchronously hashes a password. Declaration Task<string> HashPasswordAsync(string password) Parameters Type Name Description System.String password The password string to hash. Returns Type Description Task < System.String > The hashed password."
  },
  "api/ProjectManager.App.Helpers.IPasswordHasher.html": {
    "href": "api/ProjectManager.App.Helpers.IPasswordHasher.html",
    "title": "Interface IPasswordHasher | ProjectManager",
    "keywords": "Interface IPasswordHasher Namespace : ProjectManager.App.Helpers Assembly : ProjectManager.App.dll Syntax public interface IPasswordHasher Methods Name Description HashPasswordAsync(String) Asynchronously hashes a password. VerifyPasswordAsync(String, String) Asynchronously verifies a password against a hash."
  },
  "api/ProjectManager.App.Helpers.IPasswordHasher.VerifyPasswordAsync.html": {
    "href": "api/ProjectManager.App.Helpers.IPasswordHasher.VerifyPasswordAsync.html",
    "title": "Method VerifyPasswordAsync | ProjectManager",
    "keywords": "Method VerifyPasswordAsync VerifyPasswordAsync(String, String) Asynchronously verifies a password against a hash. Declaration Task<bool> VerifyPasswordAsync(string password, string hashedPassword) Parameters Type Name Description System.String password System.String hashedPassword Returns Type Description Task < System.Boolean > True if the password matched."
  },
  "api/ProjectManager.App.Models.html": {
    "href": "api/ProjectManager.App.Models.html",
    "title": "Namespace ProjectManager.App.Models | ProjectManager",
    "keywords": "Namespace ProjectManager.App.Models Classes PackageReferenceDto A class that represents a Package."
  },
  "api/ProjectManager.App.Models.PackageReferenceDto.html": {
    "href": "api/ProjectManager.App.Models.PackageReferenceDto.html",
    "title": "Class PackageReferenceDto | ProjectManager",
    "keywords": "Class PackageReferenceDto A class that represents a Package. Inheritance System.Object PackageReferenceDto Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : ProjectManager.App.Models Assembly : ProjectManager.App.dll Syntax public class PackageReferenceDto Properties Name Description Name The package's name. Version The package's version."
  },
  "api/ProjectManager.App.Models.PackageReferenceDto.Name.html": {
    "href": "api/ProjectManager.App.Models.PackageReferenceDto.Name.html",
    "title": "Property Name | ProjectManager",
    "keywords": "Property Name Name The package's name. Declaration public string Name { get; set; } Property Value Type Description System.String"
  },
  "api/ProjectManager.App.Models.PackageReferenceDto.Version.html": {
    "href": "api/ProjectManager.App.Models.PackageReferenceDto.Version.html",
    "title": "Property Version | ProjectManager",
    "keywords": "Property Version Version The package's version. Declaration public string Version { get; set; } Property Value Type Description System.String"
  },
  "api/ProjectManager.App.Services.Account.html": {
    "href": "api/ProjectManager.App.Services.Account.html",
    "title": "Namespace ProjectManager.App.Services.Account | ProjectManager",
    "keywords": "Namespace ProjectManager.App.Services.Account Interfaces IUserService"
  },
  "api/ProjectManager.App.Services.Account.IUserService.ChangeEmail.html": {
    "href": "api/ProjectManager.App.Services.Account.IUserService.ChangeEmail.html",
    "title": "Method ChangeEmail | ProjectManager",
    "keywords": "Method ChangeEmail ChangeEmail(Int32, String) Asynchronously change the email of a user. Declaration Task<bool> ChangeEmail(int id, string newEmail) Parameters Type Name Description System.Int32 id Id of the user to change the E-Mail of. System.String newEmail The new E-Mail for the user. Returns Type Description Task < System.Boolean > True if the update worked."
  },
  "api/ProjectManager.App.Services.Account.IUserService.ChangePassword.html": {
    "href": "api/ProjectManager.App.Services.Account.IUserService.ChangePassword.html",
    "title": "Method ChangePassword | ProjectManager",
    "keywords": "Method ChangePassword ChangePassword(Int32, String) Asynchronously changes the password of a user. Declaration Task<bool> ChangePassword(int id, string newPassword) Parameters Type Name Description System.Int32 id Id of the user to change the password of. System.String newPassword The new password for the user. Returns Type Description Task < System.Boolean > True if the update worked."
  },
  "api/ProjectManager.App.Services.Account.IUserService.CreateUserAsync.html": {
    "href": "api/ProjectManager.App.Services.Account.IUserService.CreateUserAsync.html",
    "title": "Method CreateUserAsync | ProjectManager",
    "keywords": "Method CreateUserAsync CreateUserAsync(String, String, String) Asynchronously creates a user. Declaration Task<User> CreateUserAsync(string username, string email, string password) Parameters Type Name Description System.String username Username of the user to create System.String email E-Mail of the user to create System.String password Password of the user to create Returns Type Description Task < ProjectManager.Database.Models.User > The created ProjectManager.Database.Models.User or null if the creation failed."
  },
  "api/ProjectManager.App.Services.Account.IUserService.DeleteUserAsync.html": {
    "href": "api/ProjectManager.App.Services.Account.IUserService.DeleteUserAsync.html",
    "title": "Method DeleteUserAsync | ProjectManager",
    "keywords": "Method DeleteUserAsync DeleteUserAsync(Int32) Asynchronously deletes a user. Declaration Task<bool> DeleteUserAsync(int id) Parameters Type Name Description System.Int32 id Id of the user to delete Returns Type Description Task < System.Boolean > True if the deletion worked."
  },
  "api/ProjectManager.App.Services.Account.IUserService.GetUserAsync.html": {
    "href": "api/ProjectManager.App.Services.Account.IUserService.GetUserAsync.html",
    "title": "Method GetUserAsync | ProjectManager",
    "keywords": "Method GetUserAsync GetUserAsync(String) Asynchronously gets a user by their username. Declaration Task<User> GetUserAsync(string username) Parameters Type Name Description System.String username The username of the User to find Returns Type Description Task < ProjectManager.Database.Models.User > A ProjectManager.Database.Models.User"
  },
  "api/ProjectManager.App.Services.Account.IUserService.html": {
    "href": "api/ProjectManager.App.Services.Account.IUserService.html",
    "title": "Interface IUserService | ProjectManager",
    "keywords": "Interface IUserService Namespace : ProjectManager.App.Services.Account Assembly : ProjectManager.App.dll Syntax public interface IUserService Methods Name Description ChangeEmail(Int32, String) Asynchronously change the email of a user. ChangePassword(Int32, String) Asynchronously changes the password of a user. CreateUserAsync(String, String, String) Asynchronously creates a user. DeleteUserAsync(Int32) Asynchronously deletes a user. GetUserAsync(String) Asynchronously gets a user by their username. UpdateUserAsync(User, User) Asynchronously updates a user. ValidateUser(String, User) Asynchronously authenticates the user."
  },
  "api/ProjectManager.App.Services.Account.IUserService.UpdateUserAsync.html": {
    "href": "api/ProjectManager.App.Services.Account.IUserService.UpdateUserAsync.html",
    "title": "Method UpdateUserAsync | ProjectManager",
    "keywords": "Method UpdateUserAsync UpdateUserAsync(User, User) Asynchronously updates a user. Declaration Task<bool> UpdateUserAsync(User oldUser, User newUser) Parameters Type Name Description ProjectManager.Database.Models.User oldUser User object of the user to update. ProjectManager.Database.Models.User newUser User object containing the new values for the User. Returns Type Description Task < System.Boolean > True if the update worked."
  },
  "api/ProjectManager.App.Services.Account.IUserService.ValidateUser.html": {
    "href": "api/ProjectManager.App.Services.Account.IUserService.ValidateUser.html",
    "title": "Method ValidateUser | ProjectManager",
    "keywords": "Method ValidateUser ValidateUser(String, User) Asynchronously authenticates the user. Declaration Task<bool> ValidateUser(string password, User user) Parameters Type Name Description System.String password The password to authenticate the User against. ProjectManager.Database.Models.User user The User object to authenticate Returns Type Description Task < System.Boolean > True if the user entered valid credentials."
  },
  "api/ProjectManager.App.Services.Core.html": {
    "href": "api/ProjectManager.App.Services.Core.html",
    "title": "Namespace ProjectManager.App.Services.Core | ProjectManager",
    "keywords": "Namespace ProjectManager.App.Services.Core Classes ProjectService A class that provides methods for working with MSBuild projects."
  },
  "api/ProjectManager.App.Services.Core.ProjectService.-ctor.html": {
    "href": "api/ProjectManager.App.Services.Core.ProjectService.-ctor.html",
    "title": "Constructor ProjectService | ProjectManager",
    "keywords": "Constructor ProjectService ProjectService(String) Saves a temporary .csproj file to the filesystem and then loads it Declaration public ProjectService(string projectContentAsString) Parameters Type Name Description System.String projectContentAsString The content of the project to load as a string Exceptions Type Condition Microsoft.Build.Exceptions.InvalidProjectFileException Thrown when the provided content is not a valid .csproj"
  },
  "api/ProjectManager.App.Services.Core.ProjectService.Dispose.html": {
    "href": "api/ProjectManager.App.Services.Core.ProjectService.Dispose.html",
    "title": "Method Dispose | ProjectManager",
    "keywords": "Method Dispose Dispose() When the object is disposed, the temporary project file is deleted from the filesystem Declaration public void Dispose()"
  },
  "api/ProjectManager.App.Services.Core.ProjectService.GetAllPackages.html": {
    "href": "api/ProjectManager.App.Services.Core.ProjectService.GetAllPackages.html",
    "title": "Method GetAllPackages | ProjectManager",
    "keywords": "Method GetAllPackages GetAllPackages() Get all package references for a project Declaration public IEnumerable<PackageReferenceDto> GetAllPackages() Returns Type Description IEnumerable < PackageReferenceDto > A list of Packages"
  },
  "api/ProjectManager.App.Services.Core.ProjectService.html": {
    "href": "api/ProjectManager.App.Services.Core.ProjectService.html",
    "title": "Class ProjectService | ProjectManager",
    "keywords": "Class ProjectService A class that provides methods for working with MSBuild projects. Inheritance System.Object ProjectService Namespace : ProjectManager.App.Services.Core Assembly : ProjectManager.App.dll Syntax public sealed class ProjectService : IDisposable Constructors Name Description ProjectService(String) Saves a temporary .csproj file to the filesystem and then loads it Methods Name Description Dispose() When the object is disposed, the temporary project file is deleted from the filesystem GetAllPackages() Get all package references for a project"
  },
  "articles/intro.html": {
    "href": "articles/intro.html",
    "title": "Soon... | ProjectManager",
    "keywords": "Soon..."
  },
  "index.html": {
    "href": "index.html",
    "title": "Soon... | ProjectManager",
    "keywords": "Soon..."
  }
}